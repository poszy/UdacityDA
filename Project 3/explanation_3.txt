For this problem the expected time complexity is O(nlog(n)).
For the solution I used a merge sort to sort the list and used simple modulus logic to find the solution

function breakdown:
 mergesort(items): Time complexity is O(n) because of the list iteration and space complexity is O(1)
 mergesort(items): while loop is O(log n) and space complexity is O(1) * 4, ignoring constants is space complexity is O(1)
 rearrange_digits(input_list): Time complexity is O(n) and space complexity is O(1)

 Overall: the worst time complexity is O(nlog(n)) because of the merge sort.
