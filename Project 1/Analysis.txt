Analysis

Task 0:
This task was pretty simple. I simply was able to get the first record of texts and last record of calls through python's built in dictionary get item[] functionality. This get item[] has a time complexity of O(1). I use this twice so the complexity comes out to O(2). 

Since only two operations happened, item[] function 2 times to acquire all of the problems desired outputs.
- O(1) + O(1) = O(2). Since these are constants, they can be ignored. 
- The final time complexity of this task comes out to O(n) OR O(c), regardless of the input size or number of items in the list, this algorithm only performs two steps and always remains constant O(c). 

Task 1:
This task was a little more complicated but I was able to break down the process into three functions. 

trimListtoNumber:

- Has one for loop that has complexity O(n). 
- Has two list.append[] operations that combine to have complexity O(2). Since these are constants they can be ignored. Since only two operations happen, the complexity is constant O(c)
- In total, the time complexity of this function is O(2) + O(n) =  O(n), as we drop the constants O(c). 
- O(n)

combineList: 

- Adds two lists together as O(1) + O(1) and are constant
- In total, the time complextiy of this function is O(n) as this is constant O(c). 
- O(n)

filterNumbers : 
- Has one for loop that has complexity  O(n)
- That has one additional operation that checks values, this makes the loop O(n^2)
- We can drop the O(1) and the complexity is O(n^2)
- O(n^2)

In total, after all functions, the time complexity is O(3n), since the 3n is constant, we can safley say the final time complexity of this program is O(n^2).


Task 2:
This task is is about the same in complexity and I was able to break it down into two functions

getTimeSpent:
- has one for loop that has complexity O(n)
- has four operations that add up to O(4)
- Since O(4) can be concidered a constant
- The final complexity of this function is O(n)

filterForLongestCall:
- has one operation that finds the max value, this operation has a complexity of O(n)
- has one for loop that has complexity O(n)
- has one additional operation that compares two values, has a complexity of O(1)

In total, O(n) + O(n) + O(1) = O(n2) + O(1). If ignore drop all constants the final time complexity of this program is O(n).


Task 3:
Task3.py was the longest program and contained 6 functions. But learning from my previous review. And after doing task 3B. I realized I could remove a lot of the for loops if I do
conditional checking with just one for loop. a lesson learned well. So now I only have 4 functions. 

getCallers : 
- Has one for loop with O(n) complexity but checks values making it O(n^2)
- Has one list.append operation that has complexity O(1)
- Dropping all constants, final complexity is O(n)
- O(n) + O(n^2)
- worst case O(n^2)

filterForNumbers:
- Has one for loop with O(n) complexity but has five additional checks making this O(n^2)
- Has four list.append operation and one find operation that has complexity O(5)
- Dropping all constants, final complexity is O(n^2)
- O(n^2)

orderCodes: 
- Has one for loop with O(n) complexity, 
- Has one sort operation that has complexity O(n log n) 
- Dropping all constants, final complexity is O(n) + O(n log n) 
- O(n log n) 

getBalgalorCalls : 
- Has one for loop with O(n) complexity but has two additional checks making this O(n^2)
- Has five operations that has complexity O(5)
- Dropping all constants, final complexity is O(n) + O(n^2)
- O(n^2) is worst case.

In total, O(n^2) + O(n^2) + O(n^2) + O(n log n), dropping constants O(n^2) + O(n log n) is the final complexity


Task 4:
This task was the slowest speed and visual wise. There was a lot of filtering and stripping I had to do to get the telemarketer numbers. It contains only two functions. 

getCallText : 
- Has one for loop with O(n) complexity
- Has one list.append operation that has complexity O(1)
- Dropping all constants, final complexity is O(n)
- O(n)

StripNumbersFromCallingNumbers : 
- has 3 for loops, that have checks, this makes the time complexity O(n^2)
- has two additional loops O(n)
- has 5 additional operations O(5) 
- final complexity is O(5^2) + O(5) = O(n) after dropping constants. 
- O(n^2) is the worst case scenario. 

In total, O(n) + O(n^2), the worst case scenario makes this program quadratic. 



